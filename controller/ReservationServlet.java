package controller;

import dao.ReservationDAO;
import dao.BookDAO;
import dao.UserDAO;
import model.Reservation;
import model.Reservation.Status;
import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.annotation.*;
import java.io.IOException;
import java.sql.Timestamp;
import java.util.Date;
import java.util.List;
import model.User;

@WebServlet(name = "ReservationServlet", value = "/reservation")
public class ReservationServlet extends HttpServlet {
    private ReservationDAO reservationDAO;
    private BookDAO bookDAO;
    private UserDAO userDAO;

    @Override
    public void init() {
        reservationDAO = new ReservationDAO();
        bookDAO = new BookDAO();
        userDAO = new UserDAO();
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        String userIdStr = request.getParameter("userId");
        String bookIdStr = request.getParameter("bookId");

        // Validate parameters
        if (userIdStr == null || userIdStr.isEmpty() || 
            bookIdStr == null || bookIdStr.isEmpty()) {
            
            request.setAttribute("errorMessage", "All fields are required");
            request.getRequestDispatcher("error.jsp").forward(request, response);
            return;
        }

        try {
            int userId = Integer.parseInt(userIdStr);
            int bookId = Integer.parseInt(bookIdStr);

            // Check if book is available
            if (!bookDAO.isBookAvailable(bookId)) {
                request.setAttribute("errorMessage", "Book is not available for reservation");
                request.getRequestDispatcher("error.jsp").forward(request, response);
                return;
            }

            // Check if user already has an active reservation for this book
            if (reservationDAO.hasActiveReservation(userId, bookId)) {
                request.setAttribute("errorMessage", "You already have an active reservation for this book");
                request.getRequestDispatcher("error.jsp").forward(request, response);
                return;
            }

            // Create reservation with current timestamp
            Reservation reservation = new Reservation(
                0, // reservationId will be generated by database
                userId,
                bookId,
                new Timestamp(new Date().getTime()), // reservationDate
                calculateExpiryDate(), // expiryDate (7 days from now)
                true, // isActive
                Status.Pending // initial status
            );

            boolean success = reservationDAO.createReservation(reservation);

            if (success) {
                // Update book availability status if reservation is active
                if (reservation.isActive()) {
                    bookDAO.updateBookAvailability(bookId, false);
                }
                response.sendRedirect("success.jsp");
            } else {
                request.setAttribute("errorMessage", "Failed to create reservation");
                request.getRequestDispatcher("error.jsp").forward(request, response);
            }
        } catch (NumberFormatException e) {
            request.setAttribute("errorMessage", "Invalid ID format - must be numbers");
            request.getRequestDispatcher("error.jsp").forward(request, response);
        } catch (Exception e) {
            request.setAttribute("errorMessage", "System error: " + e.getMessage());
            request.getRequestDispatcher("error.jsp").forward(request, response);
        }
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        try {
            String action = request.getParameter("action");
            
            if ("user".equals(action)) {
                // Get reservations by user
                String userIdStr = request.getParameter("userId");
                if (userIdStr == null || userIdStr.isEmpty()) {
                    throw new ServletException("User ID is required");
                }
                int userId = Integer.parseInt(userIdStr);
                List<Reservation> reservations = reservationDAO.getReservationsByUser(userId);
                request.setAttribute("reservations", reservations);
                request.getRequestDispatcher("viewReservation.jsp").forward(request, response);
            } 
            else if ("cancel".equals(action)) {
                // Cancel reservation
                String reservationIdStr = request.getParameter("reservationId");
                String bookIdStr = request.getParameter("bookId");
                
                if (reservationIdStr == null || bookIdStr == null) {
                    throw new ServletException("Reservation ID and Book ID are required");
                }
                
                int reservationId = Integer.parseInt(reservationIdStr);
                int bookId = Integer.parseInt(bookIdStr);
                
                // Update reservation status instead of deleting
                boolean canceled = reservationDAO.updateReservationStatus(
                    reservationId, 
                    Status.Cancelled,
                    false // isActive
                );
                
                if (canceled) {
                    // Make book available again
                    bookDAO.updateBookAvailability(bookId, true);
                    response.sendRedirect("cancel.jsp");
                    return;
                } else {
                    throw new ServletException("Failed to cancel reservation");
                }
            }
            else if ("approve".equals(action)) {
                // Admin approval of reservation
                if (!isAdmin(request)) {
                    throw new ServletException("Only admins can approve reservations");
                }
                
                String reservationIdStr = request.getParameter("reservationId");
                if (reservationIdStr == null) {
                    throw new ServletException("Reservation ID is required");
                }
                
                int reservationId = Integer.parseInt(reservationIdStr);
                boolean approved = reservationDAO.updateReservationStatus(
                    reservationId,
                    Status.Active,
                    true
                );
                
                if (approved) {
                    response.sendRedirect("reservation-approved.jsp");
                } else {
                    throw new ServletException("Failed to approve reservation");
                }
            }
            else {
                // Default action - show all reservations (admin view)
                if (!isAdmin(request)) {
                    response.sendRedirect("access-denied.jsp");
                    return;
                }
                
                List<Reservation> reservations = reservationDAO.getAllReservations();
                request.setAttribute("reservations", reservations);
                request.getRequestDispatcher("viewReservation.jsp").forward(request, response);
            }
            
        } catch (NumberFormatException e) {
            request.setAttribute("errorMessage", "Invalid ID format");
            request.getRequestDispatcher("error.jsp").forward(request, response);
        } catch (Exception e) {
            request.setAttribute("errorMessage", "Error processing request: " + e.getMessage());
            request.getRequestDispatcher("error.jsp").forward(request, response);
        }
    }

    private boolean isAdmin(HttpServletRequest request) {
        HttpSession session = request.getSession(false);
        if (session != null) {
            User user = (User) session.getAttribute("user");
            return user != null && user.isAdmin();
        }
        return false;
    }

    private Timestamp calculateExpiryDate() {
        long sevenDaysInMillis = 7 * 24 * 60 * 60 * 1000L;
        return new Timestamp(System.currentTimeMillis() + sevenDaysInMillis);
    }
}

